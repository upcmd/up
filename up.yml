
version: 1.0.0

vars:
  ver_yq: v3.3.2
  release_api_ep: https://api.github.com/repos/upcmd/up/releases
  release_upload_ep: https://uploads.github.com/repos/upcmd/up/releases

  dists_for_latest:
    - os: darwin
      arch: amd64
    - os: darwin
      arch: arm64
    - os: linux
      arch: amd64
    - os: windows
      arch: amd64

  license_header: |
    // Ultimate Provisioner: UP cmd
    // Copyright (c) 2019 Stephen Cheng and contributors

    /* This Source Code Form is subject to the terms of the Mozilla Public
     * License, v. 2.0. If a copy of the MPL was not distributed with this
     * file, You can obtain one at https://mozilla.org/MPL/2.0/. */

  latest_tagged_version: 0.9.1

  version_gofile_template: |
    package main
    var version_info = `{{.TRACEABLE_VERSION_MARKER}}`

  version_template: |

    version_info:
      Type: {{.releaseType}}
      Tag: {{.releaseTag}}
      Vesion: {{.releaseVersion}}
      SHA: {{.releaseSHA}}
      Source: https://github.com/upcmd/up/tree/{{.releaseSHA}}
      ReleaseDate: {{now|date "20060102"}}
      Changes: |
    {{.releaseNote | indent 4}}

  rolling_version_notes: |
    bleeding-edge rolling release
    based on {{.latest_tagged_version}} with updates
    full regression tested and stable
    {{ printf "./release/rolling/%s.md" .releaseDate |fileContent}}

  rolling_version_template: |

    version_info:
      Type: bleeding-edge-rolling
      Tag: master
      Vesion: rolling-{{now|date "20060102"}}
      SHA: {{.releaseSHA}}
      Source: https://github.com/upcmd/up/tree/{{.releaseSHA}}
      ReleaseDate: {{now|date "20060102"}}
      BaseOn: {{.latest_tagged_version}} with updates

  latest_version_notes: |
    latest bleeding-edge release
    based on {{.latest_tagged_version}} with updates
    full regression tested and stable
    {{ printf "./release/rolling/%s.md" .releaseDate |fileContent}}

  latest_version_template: |

    version_info:
      Type: bleeding-edge-latest
      Tag: master
      Vesion: latest
      SHA: {{.releaseSHA}}
      Source: https://github.com/upcmd/up/tree/{{.releaseSHA}}
      ReleaseDate: {{now|date "20060102"}}
      BaseOn: {{.latest_tagged_version}} with updates

dvars:
  - name: releaseDate
    value: '{{now|date "20060102"}}'
  - name: rolling_version_notes
    value: '{{.rolling_version_notes}}'
    expand: 2
  - name: latest_version_notes
    value: '{{.latest_version_notes}}'
    expand: 2

tasks:
  -
    name: deps
    desc: update key deps
    task:
      -
        func: shell
        do:
          - go list -m -versions github.com/upcmd/yq/v3
          - 'go get github.com/upcmd/yq/v3@{{.ver_yq}}'
  -
    name: facts
    desc: gather facts
    task:
      -
        func: shell
        do:
          - uname
        reg: result

      - func: cmd
        desc: get os  - [Darwin | Linux]
        dvars:
          - name: os
            value: '{{ .result.Output }}'
            flags:
              - v
        do:
          - name: print
            cmd: 'OS: {{.os}}'
          - name: return
            cmd:
              - os

  -
    name: Publish_untagged
    desc: publish both rolling and latest releases
    task:
      - func: call
        do:
          - Publish_rolling
          - Publish_latest

  -
    name: Publish_latest
    desc: build the latest bleeding-edge release
    task:
      -
        func: shell
        do: git rev-parse --verify HEAD

      -
        func: cmd
        dvars:
          - name: releaseSHA
            value: '{{ .last_result.Output }}'
            flags: [taskScope]
        do:
          - name: print
            cmd: |
              SHA: {{.releaseSHA}}

      - func: cmd
        desc: |
          get the release version info
        dvars:
          - name: TRACEABLE_VERSION_MARKER
            value: '{{.latest_version_template}}'
            expand: 2
            flags:
              - v
          - name: version_gofile_content
            value: '{{.version_gofile_template}}'
            expand: 2
            flags:
              - v

        do:
          - name: print
          - name: print
            desc: go version file
            cmd: |
              {{.version_gofile_content}}
          - name: writeFile
            desc: prepare the release info to be built into binary
            cmd:
              content: "{{.version_gofile_content}}"
              filename: version.go
              dir: ./app/up

          - namex: inspect
            cmd:
              - exec_vars

          - namex: pause
            desc: double check release note

          - namex: exit

      -
        func: call
        desc: build only the common distros
        vars:
          ver: latest
        dvars:
          - name: distlist
            value: |
              {{ range $idx, $dist := .dists_for_latest -}}
              {{- with $dist }}
              - {{ .os}}/{{.arch -}}
              {{end}}
              {{end}}
            flags:
              - toObj
              - keepName
              - v
        do: buildDistro

      - func: shell
        desc: enquire the latest release
        do:
          - curl -s https://api.github.com/repos/upcmd/up/releases/tags/latest
        reg: result

      - func: shell
        desc: delete the latest release remotely if it exists
        dvars:
          - name: release
            value: '{{.result.Output}}'
            flags:
              - toObj
          - name: releaseid
            value: '{{.release_object.id}}'
            flags:
              - taskScope
              - v
        if: '{{ne (printf "%s" .releaseid)  "None" }}'
        do:
          - echo "deleting release - {{.releaseid}}"
          - echo """curl -sX DELETE {{.release_api_ep}}/{{.releaseid}}"""
          - |
            curl -s \
            -X DELETE \
            -u ${GITHUB_USERNAME}:${GITHUB_TOKEN} \
            {{.release_api_ep}}/{{.releaseid}}
        else:
          - func: cmd
            do:
              - name: print
                cmd: "no latest release in remote, ignore"

      - func: shell
        desc: |
          delete the remote tag latest
          create latest release tag
        do:
          - git push --delete origin latest
          - git tag -d latest
          - git tag latest
          - git push origin refs/tags/latest
        flags:
          - ignoreError

      - func: shell
        desc: create the latest master release
        dvars:
          - name: quick_notes
            value: '{{.latest_version_notes| replace "\n" "\\n"}}'
            expand: 2
            flags:
              - v
        do: |
          curl -s -d '
          {
            "tag_name": "latest",
            "target_commitish": "master",
            "name": "latest",
            "body": "{{.quick_notes}}",
            "draft": false,
            "prerelease": false
          }
          ' \
          -X POST \
          -u ${GITHUB_USERNAME}:${GITHUB_TOKEN} \
          -H "Content-Type: application/json" \
          {{.release_api_ep}}
        reg: result

      - func: block
        loop: dists_for_latest
        desc: upload binary files
        dvars:
          - name: release
            value: '{{.result.Output}}'
            flags:
              - toObj
          - name: releaseid
            value: '{{.release_object.id}}'
            flags:
              - v
        do:
          - func: shell
            desc: upload the most used distros only
            dvars:
              - name: os
                value: '{{.loopitem.os}}'
              - name: arch
                value: '{{.loopitem.arch}}'
            do:
              - echo "upload for latest release - {{.releaseid}} for {{.os}}-{{.arch}}"
              - |
                curl -s \
                -X POST \
                --data-binary '@build/up_{{.os}}_{{.arch}}_latest' \
                -u ${GITHUB_USERNAME}:${GITHUB_TOKEN} \
                -H "Content-Type: application/json" \
                {{.release_upload_ep}}/{{.releaseid}}/assets?name=up_{{.os}}_{{.arch}}_latest
        if: '{{ne (printf "%s" .releaseid)  "None" }}'

  -
    name: Publish_rolling
    desc: build the bleeding-edge rolling release
    task:
      -
        func: shell
        do: git rev-parse --verify HEAD

      -
        func: cmd
        dvars:
          - name: releaseSHA
            value: '{{ .last_result.Output }}'
            flags: [taskScope]
        do:
          - name: print
            cmd: |
              SHA: {{.releaseSHA}}

      - func: cmd
        desc: |
          get the release version info
        dvars:
          - name: TRACEABLE_VERSION_MARKER
            value: '{{.rolling_version_template}}'
            expand: 2
            flags:
              - v
          - name: version_gofile_content
            value: '{{.version_gofile_template}}'
            expand: 2
            flags:
              - v

        do:
          - name: print
            desc: go version file
            cmd: |
              {{.version_gofile_content}}
          - name: writeFile
            desc: prepare the release info to be built into binary
            cmd:
              content: "{{.version_gofile_content}}"
              filename: version.go
              dir: ./app/up

          - namex: exit

      -
        func: call
        desc: build only the common distros
        dvars:
          - name: ver
            value: 'rolling-{{now|date "20060102"}}'
          - name: distlist
            value: |
              {{ range $idx, $dist := .dists_for_latest -}}
              {{- with $dist }}
              - {{ .os}}/{{.arch -}}
              {{end}}
              {{end}}
            flags:
              - toObj
              - keepName
              - v
        do: buildDistro

      - func: shell
        desc: |
          delete the remote tag latest
          create latest release tag
        do:
          - git push --delete origin latest
          - git tag -d latest
          - git tag latest
          - git push origin refs/tags/latest
        flags:
          - ignoreError

      - func: shell
        desc: |
          create rolling release tag
        do:
          - 'git push --delete origin rolling-{{now|date "20060102"}}'
          - 'git tag -d rolling-{{now|date "20060102"}}'
          - 'git tag rolling-{{now|date "20060102"}}'
          - 'git push origin refs/tags/rolling-{{now|date "20060102"}}'
        flags:
          - ignoreError

      - func: shell
        desc: create the latest rolling release
        dvars:
          - name: quick_notes
            value: '{{.rolling_version_notes| replace "\n" "\\n"}}'
            expand: 2
        do: |
          curl -s -d '
          {
            "tag_name": "rolling-{{now|date "20060102"}}",
            "target_commitish": "master",
            "name": "rolling-{{now|date "20060102"}}",
            "body": "{{.quick_notes}}",
            "draft": false,
            "prerelease": false
          }
          ' \
          -X POST \
          -u ${GITHUB_USERNAME}:${GITHUB_TOKEN} \
          -H "Content-Type: application/json" \
          {{.release_api_ep}}
        reg: result

      - func: block
        loop: dists_for_latest
        desc: upload binary files
        dvars:
          - name: release
            value: '{{.result.Output}}'
            flags:
              - toObj
          - name: releaseid
            value: '{{.release_object.id}}'
            flags:
              - v
        do:
          - func: shell
            desc: upload the most used distros only
            dvars:
              - name: os
                value: '{{.loopitem.os}}'
              - name: arch
                value: '{{.loopitem.arch}}'
            do:
              - echo "upload for latest release - {{.releaseid}} for {{.os}}-{{.arch}}"
              - |
                curl -s \
                -X POST \
                --data-binary '@build/up_{{.os}}_{{.arch}}_rolling-{{now|date "20060102"}}' \
                -u ${GITHUB_USERNAME}:${GITHUB_TOKEN} \
                -H "Content-Type: application/json" \
                {{.release_upload_ep}}/{{.releaseid}}/assets?name=up_{{.os}}_{{.arch}}_rolling-{{now|date "20060102"}}
        if: '{{ne (printf "%s" .releaseid)  "None" }}'

  -
    name: build
    desc: build binary
    task:
      -
        func: shell
        desc: build the binary to build directory
        do:
          - rm -rf ./build
          - mkdir -p ./build/linux
          - mkdir -p ./build/mac
          - mkdir -p ./build/arm
          - GOOS=darwin GOARCH=amd64 go build -o build/mac/up app/up/*.go
          - GOOS=darwin GOARCH=arm64 go build -o build/m1/up app/up/*.go
          - GOOS=linux GOARCH=amd64 go build -o build/linux/up app/up/*.go

  -
    name: buildDistro
    desc: build distro
    task:
      -
        func: shell
        desc: build the binary into build directory
        do:
          - echo "build version - {{.ver}}"
          - rm -rf ./build
          - mkdir -p ./build

      -
        func: block
        desc: |
          conditionally to take common distros for latest release or all distros
          default to build all types of distros supported
          if instructed the dist=common, then only build: linux, darwin and windows
        if: '{{not (pathExisted "distlist") }}'
        do:
          -
            func: shell
            desc: |
              this gives a list of supported os/arch types
              eg:
                android/arm64
                darwin/amd64
                darwin/arm64
                freebsd/amd64
                illumos/amd64
                linux/amd64
                linux/ppc64
                netbsd/arm64
                windows/amd64
                ..... more ...
            do: go tool dist list

          -
            func: cmd
            desc: obtain the full list of different type of distros
            dvars:
              - name: void
                value: '{{ .last_result.Output |splitLines |reg "distlist" }}'
        else:
          - func: cmd
            desc: build the supplied list of dist types
            do:
              - name: print
                cmd: 'building {{.distlist}}'
              - name: printObj
                cmd: 'distlist'

      - func: block
        desc: build the instructed distribution binary
        loop: distlist
        do:
          - func: shell
            desc: iterate and build all distros - go ahead if one platform is not supported
            dvars:
              - name: void
                value: '{{.loopitem |split "/" |reg "dist"}}'
                flags:
                  - v
              - name: os
                value: '{{.dist._0}}'
              - name: arch
                value: '{{.dist._1}}'
            do:
              - 'echo "build release version - {{.ver}} > [ os = {{.os}}, arch = {{.arch}} ]"'
              - GOOS={{.os}} GOARCH={{.arch}} go build -o build/up_{{.os}}_{{.arch}}_{{.ver}} app/up/*.go
            flags:
              - ignoreError

      -
        func: shell
        desc: list all built results
        do: ls -l build/

  - name: Publish
    desc: publish for github tagged version
    task:
      -
        func: shell
        do: git rev-parse --verify HEAD

      -
        func: cmd
        dvars:
          - name: releaseSHA
            value: '{{ .last_result.Output }}'
            flags: [taskScope]
        do:
          - name: print
            cmd: |
              SHA: {{.releaseSHA}}

      -
        func: shell
        desc: get the tag version. eg. 0.9.0
        do:
          - echo "sha - {{.releaseSHA}}"
          - git describe --exact-match --tags $(git log -n1 --pretty='%h')
        reg: result

      - func: cmd
        desc: get the tag/release version
        vars:
          releaseType: tagged-version
        dvars:
          - name: ver
            value: '{{ .result.Output }}'
            flags:
              - v
              - taskScope
          - name: releaseTag
            value: '{{ .ver }}'
          - name: releaseVersion
            value: '{{ .ver }}'
          - name: releaseNote
            value: '{{ printf "%s%s%s" "./release/tags/" .ver ".md" |fileContent}}'
            flags:
              - v
              - taskScope
          - name: TRACEABLE_VERSION_MARKER
            value: '{{.version_template}}'
            expand: 2
            flags:
              - v
          - name: version_gofile_content
            value: '{{.version_gofile_template}}'
            expand: 2
            flags:
              - v

        do:
          - name: print
            cmdx: |
              version: {{.ver}}
              SHA: {{.releaseSHA}}
          - name: print
            cmdx: |
              {{.TRACEABLE_VERSION_MARKER}}
          - name: print
            desc: go version file
            cmd: |
              {{.version_gofile_content}}
          - name: writeFile
            desc: prepare the release info to be built into binary
            cmd:
              content: "{{.version_gofile_content}}"
              filename: version.go
              dir: ./app/up

          - namex: inspect
            cmd:
              - exec_vars

          - namex: pause
            desc: double check release note

          - namex: exit

      - func: call
        do:
          - buildDistro

      - func: shell
        desc: get build binary file list
        do: ls build

      - func: cmd
        desc: get binary list as object
        dvars:
          - name: void
            value: '{{ .last_result.Output | splitLines |reg "distList" }}'
            flags:
              - v
          - name: release_note_js_string
            value: '{{ .releaseNote| replace "\n" "\\n"}}'
            flags:
              - v
              - taskScope
        do:
          - name: print
            cmd: 'distro list: {{.distList}}'

      - func: shell
        desc: create the tagged release
        do:
          - |
            curl -s -d '
            {
              "tag_name": "{{.ver}}",
              "target_commitish": "master",
              "name": "{{.ver}}",
              "body": "{{.release_note_js_string }}",
              "draft": false,
              "prerelease": false
            }
            ' \
            -X POST \
            -u ${GITHUB_USERNAME}:${GITHUB_TOKEN} \
            -H "Content-Type: application/json" \
            {{.release_api_ep}}
        reg: result

      - func: block
        desc: upload all build distro binary files
        loop: distList
        dvars:
          - name: release
            value: '{{.result.Output}}'
            flags:
              - toObj
          - name: releaseid
            value: '{{.release_object.id}}'
            flags:
              - v
        do:
          - func: shell
            desc: upload the most used distros only
            do:
              - echo "upload for {{.ver}} release - {{.releaseid}} with file {{.loopitem}}"
              - |
                curl -s \
                -X POST \
                --data-binary '@build/{{.loopitem}}' \
                -u ${GITHUB_USERNAME}:${GITHUB_TOKEN} \
                -H "Content-Type: application/json" \
                {{.release_upload_ep}}/{{.releaseid}}/assets?name={{.loopitem}}
        if: '{{ne (printf "%s" .releaseid)  "None" }}'

  - name: release_local
    desc: release it to local path
    task:
      - func: call
        do:
          - facts
          - build

      - func: cmd
        do:
          - name: print
            cmd: 'OS is: {{.os}}'

      - func: shell
        desc: copy the binary to path in osx
        do: cp -f build/mac/up /usr/local/bin/
        if: '{{ eq .os "Darwin" }}'

      - func: shell
        desc: copy the binary to path in linux
        do: cp -f build/linux/up /bin/
        if: '{{ eq .os "Linux" }}'

      - func: shell
        desc: |
          copy the binary to path in Mac with M1 Chip
          TODO: add if condition to use arch == arm64
        do: cp -f build/m1/up /bin/
        if: '{{ eq .os "Darwin" }}'

  -
    name: testc
    desc: test all the function tests
    task:
      -
        func: shell
        do:
          - go test ./tests/functests/casec_test.go -v

  -
    name: Log_gen
    desc: generate all logs for the docs in build pipeline
    task:
      -
        func: shell
        dvars:
          - name: hugo_doc_log_dir
            value: /up_project/updocs/reflogs
            flags:
              - taskScope
        do:
          - 'echo "log will be generated at {{.hugo_doc_log_dir}}"'
          - 'rm -rf {{.hugo_doc_log_dir}}'
          - 'mkdir -p {{.hugo_doc_log_dir}}'
          - zsh -c "cp ./build/**/up_linux* /bin/up || cp ./build/linux/up /bin/up"

      -
        func: call
        vars:
          upcmd: up
        do:
          - log_gen_main

  -
    name: Log_gen_test
    desc: generate all logs for the docs and test in Mac
    task:
      -
        func: cmd
        dvars:
          - name: hugo_doc_log_dir
            value: '{{env "HUGO_DOC_LOG_DIR"}}'
            flags: [reg]
        do:
          - name: print
            cmd: 'log will be generated at: {{.hugo_doc_log_dir}}'

      -
        func: shell
        do:
          - 'echo {{.hugo_doc_log_dir}}'
          - 'rm -rf {{.hugo_doc_log_dir}}'
          - 'mkdir -p {{.hugo_doc_log_dir}}'

      -
        func: call
        vars:
          upcmd: ./build/mac/up
        do:
          - release_local
          - log_gen_main

  -
    name: log_gen_main
    desc: main entry to process different type of cases
    task:
      -
        func: call
        do: log_gen_module
        loop:
          - ????
          - f????

      -
        func: call
        do: log_gen_impl
        loop:
          - c????
          - f????

  -
    name: log_gen_module
    task:

      -
        func: shell
        dvars:
          - name: moduletests_dir
            value: ./tests/modtests
            flags:
              - taskScope
        desc: |
          get mod tests dirs
          ./0001
          ......
        do:
          - 'cd {{.moduletests_dir}}; find . -name "{{.loopitem}}" -maxdepth 1 -mindepth 1 -type d|sort|cut -d\/ -f2'
        reg: cases

      - func: cmd
        desc: get the case list object
        dvars:
          - name: void
            value: '{{ .cases.Output | splitLines |reg "caselist" }}'

      - func: cmd
        do:
          - name: print
            cmd: 'caselist: {{.caselist}}'

      - func: call
        do: generate_each_module_logs
        loop: caselist

  -
    name: generate_each_module_logs
    desc: generate logs for each module
    task:
      -
        func: shell
        dvars:
          - name: casename
            value: '{{.loopitem}}'
          - name: moddir
            value: '{{.moduletests_dir}}/{{.loopitem}}'
          - name: shcmd
            value: '{{.upcmd}} ngo -d {{.moddir}} -i dev --configdir={{.moddir}} -w refdir'
            flags:
              - vvv
          - name: shoutput
            value: '> {{.hugo_doc_log_dir}}/m'
            flags:
              - vvv
        do:
          - 'echo """{{.shcmd}} -v {{.loopitem}} {{.shoutput}}{{.casename}}_{{.loopitem}}.log"""'
          - '{{.shcmd}} -v {{.loopitem}} {{.shoutput}}{{.casename}}_{{.loopitem}}.log'
        loop:
          - v
          - vv
          - vvv
          - vvvv
          - vvvvv
        flags:
          - ignoreError

  -
    name: log_gen_impl
    desc: run in up docker | generate logs
    task:
      -
        func: shell
        name: getcases
        do:
          - cd ./tests/functests; ls {{.loopitem}}.yml
        reg: cases

      -
        func: cmd
        dvars:
          - name: void
            value: '{{ .cases.Output | splitLines |reg "caselist" }}'
            flags: [vvv]

      -
        func: cmd
        do:
          - name: print
            cmd: 'caselist {{.caselist}}'

      -
        func: call
        do: process_level
        loop: caselist

  -
    name: process_level
    desc: process different verbose level
    task:
      -
        func: shell
        dvars:
          - name: parentLoopItem
            value: '{{.loopitem}}'
          - name: shcmd
            value: '{{.upcmd}} ngo task -d ./tests/functests -t {{.parentLoopItem | replace ".yml" ""}} -i dev --configdir=./tests/functests '
            flags:
              - vvv
          - name: shoutput
            value: '> {{.hugo_doc_log_dir}}/{{.parentLoopItem | replace ".yml" ""}}'
            flags:
              - vvv
        do:
          - 'echo """{{.shcmd}} -v {{.loopitem}} {{.shoutput}}_{{.loopitem}}.log"""'
          - '{{.shcmd}} -v {{.loopitem}} {{.shoutput}}_{{.loopitem}}.log'
        loop:
          - v
          - vv
          - vvv
          - vvvv
          - vvvvv
        flags:
          - ignoreError

  -
    name: testf
    desc: test the exit scenarios due to different types of validation
    task:
      -
        func: shell
        name: getcases
        do:
          - cd ./tests/functests; ls f*.yml
        reg: cases

      -
        func: shell
        desc: a real showcase of how to loop using template
        do:
          - |
            {{ range $idx, $file := .cases | splitLines -}}
            {{$casename :=  $file | replace ".yml" ""}}
            echo "==========failure case test {{$idx |add1}}==============="
            go run app/up/*.go task task -d ./tests/functests -t {{$casename}} -i dev -v vvvv
            {{end}}

  -
    name: testp
    desc: test user cases with prompt
    task:
      -
        func: shell
        name: getcases
        do:
          - cd ./tests/functests; ls p*.yml
        reg: cases

      -
        func: shell
        desc: a real showcase of how to loop using template
        do:
          - |
            {{ range $idx, $file := .cases | splitLines -}}
            {{$casename :=  $file | replace ".yml" ""}}
            echo "==========failure case test {{$idx |add1}}==============="
            go run app/up/*.go task task -d ./tests/functests -t {{$casename}} -i dev -v vvvv
            {{end}}

  -
    name: testm
    desc: test specific module
    task:
      - func: call
        do: release_local
      -
        func: shell
        dvars:
          - name: casename
            flags:
              - prompt
        do: |
          cd ./tests/modtests/{{.casename}}
          ls -lart
          up ngo

  -
    name: testx
    desc: test specific the function test
    task:
      -
        func: shell
        do:
          - go test ./tests/functests/casex_test.go -v

  -
    name: testwip
    desc: test wip case
    task:
      -
        func: shell
        do:
          - go test ./tests/functests/wip_test.go -v


  -
    name: wiptest
    desc: test wip
    task:
      -
        func: shell
        do:
          - go run app/up/*.go task task -d ./tests/functests -t wip -v vvvv

  -
    name: testall
    desc: test all differnt type of tests
    task:
      -
        func: call
        do:
          - testx
          - testwip
          - wiptest
          - testc

  -
    name: Build_upcli_docker_image
    desc: build a docker image to use up CLI command
    task:
      - func: call
        do:
          - build
      -
        func: shell
        dvars:
          - name: docker_version
            value: '{{now|date "20060102"}}'
          - name: docker_tag
            value: 'docker.pkg.github.com/upcmd/up/upcli:{{.docker_version}}'
          - name: docker_latest_tag
            value: 'docker.pkg.github.com/upcmd/up/upcli:latest'
          - name: warn
            value: please ensure the docker build follows a release so that version.go is updated properly
            flags:
              - prompt
        do:
          - 'docker build -t {{.docker_tag}} .'
          - 'docker build -t {{.docker_latest_tag}} .'
          - |
            docker login docker.pkg.github.com -u ${GITHUB_USERNAME} --password ${GITHUB_TOKEN}
            docker push {{.docker_tag}}
            docker push {{.docker_latest_tag}}

  -
    name: build_dev_docker_image
    desc: run in linux | build a nix docker image
    task:
      -
        func: shell
        do:
          - nix build
          - cp  /nix/store/*-docker-image-cmgolang.tar.gz .
          - rm -f result

  -
    name: load_dev_docker_image
    desc: run in linux | build a nix docker image
    task:
      -
        func: shell
        do:
          - ls *-docker-image-cmgolang.tar.gz

      -
        func: shell
        do:
          - 'docker load --input="{{.last_result.Output}}"'
          - docker images |grep cmgolang

  -
    name: Add_MPL2_License
    desc: Add license notice to all golang file as a notice header
    task:
      -
        func: shell
        name: getcases
        do:
          - find ./ -name "*.go"
        reg: cases

      -
        func: cmd
        dvars:
          - name: void
            value: '{{ .cases.Output | splitLines |reg "caselist" }}'
            flags: [vvv]

      -
        func: block
        desc: apply the license
        do:
          -
            func: cmd
            dvars:
              - name: filepath
                value: '{{.loopitem}}'
                flags:
                  - taskScope
            do:
              - name: readFile
                cmd:
                  filename: '{{.filepath}}'
                  reg: content
              - name: print
                cmdx: '{{.content}}'

          -
            func: cmd
            desc: apply the license if the license header has not been applied
            dvars:
              - name: licensed_code
                value: |
                  {{.license_header}}
                  {{.content}}
            do:
              - name: print
                cmd: 'processing {{.filepath}}'

              - name: writeFile
                cmd:
                  content: "{{.licensed_code}}"
                  filename: '{{.filepath}}'
              -
                namex: exit
            if: '{{ not (regexMatch "MPL/2.0" .content) }}'

        loop: caselist


  -
    name: how_many_stars
    desc: get the number of star of the project
    task:
      - func: shell
        do: |
          curl --silent 'https://api.github.com/repos/upcmd/up' -H 'Accept: application/vnd.github.preview' | grep  stargazers_count
        reg: result

  -
    name: check_github_action_log
    desc: check the latest github action log
    task:
      - func: shell
        do:
          - |
            curl -s \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/upcmd/up/actions/workflows/feature-request.yml/runs |grep jobs_url |tail -n1| sed -n 's#.*/runs/\([0-9]*\)/.*#\1#p'

      - func: shell
        do:
          - gh run view {{ .last_result.Output }} --log
